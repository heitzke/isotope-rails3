class PostDecorator < ApplicationDecorator
  decorates :post

  def avatar
    h.link_to(h.image_tag(post.user.avatar.url(:thumb)), h.about_path(post.user))
  end

  def title_link(show_comment_links=false)
    url = show_comment_links ? h.post_path(post, anchor: 'disqus_thread') : h.post_path(post)
    h.link_to_unless_current(post.title, post, "data-disqus-identifier" => post.slug)
  end

  def author_link
    h.link_to(post.user, h.about_path(post.user))
  end

  def body
    RDiscount.new(post.body).to_html.html_safe
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
